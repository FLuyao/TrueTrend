import pandas as pd
import numpy as np
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
from matplotlib import rcParams
import os

# 尝试设置中文字体（使用系统自带字体）
try:
    # Windows系统通常自带微软雅黑
    rcParams['font.sans-serif'] = ['Microsoft YaHei']  # 或 ['SimHei']
    rcParams['axes.unicode_minus'] = False  # 解决负号显示问题
except:
    print("警告：中文字体设置失败，图表可能无法正常显示中文")

def predict_comments(input_file):
    """
    预测2016年11月每日评论数量
    
    参数:
    input_file -- 输入Excel文件路径
    
    返回:
    包含预测结果的DataFrame
    """
    # 创建销量分析文件夹
    output_dir = "销量分析"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    try:
        # 读取Excel文件
        df = pd.read_excel(input_file)
        
        # 检查rateDate列是否已经是datetime格式
        if not pd.api.types.is_datetime64_any_dtype(df['rateDate']):
            df['rateDate'] = pd.to_datetime(df['rateDate'])
        
        # 提取2014年11月和2015年11月的销售
        nov_2014 = df[(df['rateDate'].dt.year == 2014) & (df['rateDate'].dt.month == 11)]
        nov_2015 = df[(df['rateDate'].dt.year == 2015) & (df['rateDate'].dt.month == 11)]
        
        # 计算每月的销售总数
        count_2014 = len(nov_2014)
        count_2015 = len(nov_2015)
        
        print(f"2014年11月销售数量: {count_2014}")
        print(f"2015年11月销售数量: {count_2015}")
        
        if count_2014 == 0 or count_2015 == 0:
            raise ValueError("2014年或2015年11月没有销售数据")
        
        # 2. 改进的预测方法（使用线性增长而非指数增长）
        # 计算年增长率
        if count_2014 == 0:
            growth_rate = 0
        else:
            growth_rate = (count_2015 - count_2014) / count_2014
        
        # 应用相同的增长率预测2016年
        pred_2016 = int(count_2015 * (1 + growth_rate))
        
        # 限制最大增长不超过50%，防止异常值
        max_growth = int(count_2015 * 1.5)
        pred_2016 = min(pred_2016, max_growth)
        
        print(f"预测2016年11月总销售数量: {pred_2016}")
        
        # 3. 每日销售分布分析
        # 计算2015年11月每天的销售数量（主要参考2015年数据）
        daily_2015 = nov_2015.groupby(nov_2015['rateDate'].dt.day).size()
        
        # 计算2015年每日占比
        if count_2015 > 0:
            daily_ratio = daily_2015 / count_2015
        else:
            daily_ratio = pd.Series(np.ones(30)/30, index=range(1,31))
        
        # 预测2016年11月每天的销售数量
        daily_2016 = (daily_ratio * pred_2016).round().astype(int)
        
        # 确保总和等于预测总量
        while daily_2016.sum() != pred_2016:
            diff = int(pred_2016 - daily_2016.sum())
            if diff > 0:
                daily_2016[np.argmin(daily_2016)] += 1
            else:
                daily_2016[np.argmax(daily_2016)] -= 1
        
        # 创建完整日期范围
        days = range(1, 31)
        daily_pred = pd.Series(daily_2016, index=days).reindex(days, fill_value=0)
        
        # 4. 结果整理
        result = pd.DataFrame({
            '日期': [f"2016-11-{day:02d}" for day in days],
            '预测销量': daily_pred.values
        })
        
        # 5. 可视化
        plt.figure(figsize=(12, 6))
        plt.plot(days, daily_pred, 'b-', label='2016年预测')
        if not daily_2015.empty:
            plt.plot(daily_2015.index, daily_2015.values, 'g--', label='2015年实际')
        plt.title('2016年11月每日销量预测')
        plt.xlabel('日期')
        plt.ylabel('销量')
        plt.legend()
        plt.grid()
        
        # 保存图片
        plot_path = os.path.join(output_dir, "2016年11月销量预测.png")
        plt.savefig(plot_path, dpi=300, bbox_inches='tight')
        plt.close()
        print(f"预测图表已保存到 '{plot_path}'")
        
        # 保存结果到Excel
        excel_path = os.path.join(output_dir, "2016年11月销量预测.xlsx")
        result.to_excel(excel_path, index=False)
        print(f"预测结果已保存到 '{excel_path}'")
        
        return result
    
    except Exception as e:
        print(f"发生错误: {str(e)}")
        return None

# 使用示例
if __name__ == "__main__":
    # 替换为你的Excel文件路径
    input_file = "评论_真维斯_清洗后.xlsx"
    result = predict_comments(input_file)
    
    if result is not None:
        print("\n2016年11月每日销量预测结果:")
        print(result)
