import pandas as pd
import matplotlib.pyplot as plt
import os
import seaborn as sns
from matplotlib import rcParams

# ================== 初始化设置 ==================
# 设置中文字体
try:
    rcParams['font.sans-serif'] = ['Microsoft YaHei']  # 优先使用微软雅黑
    rcParams['axes.unicode_minus'] = False  # 解决负号显示问题
except Exception as e:
    print(f"字体设置警告：{str(e)}，图表可能无法正常显示中文")

# 创建输出目录
output_dir = '销售分析结果'
os.makedirs(output_dir, exist_ok=True)

# 颜色方案
COLOR_PALETTE = {
    'daily': '#4E79A7',
    'monthly_bar': '#59A14F',
    'monthly_line': '#E15759',
    'peak': '#76B7B2'
}

# ================== 数据准备 ==================
try:
    df = pd.read_excel('评论_真维斯_清洗后.xlsx')
    df['rateDate'] = pd.to_datetime(df['rateDate'])  # 确保日期格式正确
except Exception as e:
    print(f"数据加载错误：{str(e)}")
    exit()

# ================== 分析函数定义 ==================
def plot_daily_sales(data, filename):
    """绘制每日销售图表"""
    plt.figure(figsize=(14, 7))
    ax = data.plot(kind='bar', color=COLOR_PALETTE['daily'])
    
    plt.title('每日销售数量统计', fontsize=14)
    plt.xlabel('日期', fontsize=12)
    plt.ylabel('销售数量', fontsize=12)
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    
    # 每7天显示一个标签
    n = 7
    tick_labels = [label.get_text() if i%n == 0 else '' 
                 for i, label in enumerate(ax.xaxis.get_ticklabels())]
    ax.xaxis.set_ticklabels(tick_labels)
    
    plt.tight_layout()
    save_plot(filename)

def plot_monthly_bar(data, filename):
    """绘制月度销售条形图"""
    plt.figure(figsize=(10, 6))
    data.plot(kind='bar', color=COLOR_PALETTE['monthly_bar'])
    
    plt.title('月度销售数量统计', fontsize=14)
    plt.xlabel('月份', fontsize=12)
    plt.ylabel('销售数量', fontsize=12)
    plt.xticks(rotation=45)
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    
    plt.tight_layout()
    save_plot(filename)

def plot_monthly_line(data, filename):
    """绘制月度销售趋势线图"""
    plt.figure(figsize=(12, 6))
    sns.lineplot(
        x=data.index.astype(str),
        y=data.values,
        marker='o',
        color=COLOR_PALETTE['monthly_line'],
        linewidth=2.5
    )
    
    plt.title('销售数量月度趋势', fontsize=14)
    plt.xlabel('时间', fontsize=12)
    plt.ylabel('评价数量', fontsize=12)
    plt.xticks(rotation=45)
    plt.grid(True, linestyle='--', alpha=0.6)
    
    plt.tight_layout()
    save_plot(filename)

def plot_peak_daily(data, filename):
    """绘制高峰期间每日销售趋势"""
    plt.figure(figsize=(12, 6))
    data.plot(color=COLOR_PALETTE['peak'], linewidth=2)
    
    plt.title('高峰期间每日销售量', fontsize=14)
    plt.xlabel('日期', fontsize=12)
    plt.ylabel('销售数量', fontsize=12)
    plt.grid(True, linestyle='--', alpha=0.6)
    
    plt.tight_layout()
    save_plot(filename)

def save_plot(filename):
    """统一保存图表函数"""
    try:
        plt.savefig(
            f'{output_dir}/{filename}',
            dpi=300,
            bbox_inches='tight',
            facecolor='white'
        )
        plt.close()
    except Exception as e:
        print(f"图表保存错误 [{filename}]: {str(e)}")
        plt.close()

def save_to_excel(data_dict, filename):
    """保存数据到Excel"""
    try:
        with pd.ExcelWriter(f'{output_dir}/{filename}') as writer:
            for sheet_name, data in data_dict.items():
                data.to_excel(writer, sheet_name=sheet_name)
    except Exception as e:
        print(f"Excel保存错误: {str(e)}")

# ================== 数据分析执行 ==================
def main():
    # 基础统计
    daily_counts = df['rateDate'].dt.date.value_counts().sort_index()
    monthly_counts = df['rateDate'].dt.to_period('M').value_counts().sort_index()
    
    # 高峰期间分析 (2015-11 至 2016-01)
    peak_df = df[(df['rateDate'] >= '2015-11-01') & 
                (df['rateDate'] <= '2016-01-31')]
    peak_daily = peak_df.resample('D', on='rateDate').size()
    peak_daily = peak_daily.reindex(
        pd.date_range(start='2015-11-01', end='2016-01-31'),
        fill_value=0
    )
    
    # 绘制图表
    plot_daily_sales(daily_counts, '01_每日销售数量.png')
    plot_monthly_bar(monthly_counts, '02_月度销售数量条形图.png')
    plot_monthly_line(monthly_counts, '03_月度销售趋势线图.png')
    plot_peak_daily(peak_daily, '04_高峰期间日销售趋势.png')
    
    # 保存数据
    save_to_excel({
        '每日销售': daily_counts,
        '月度销售': monthly_counts,
        '高峰期间': peak_daily
    }, '销售统计汇总.xlsx')
    
    print(f"分析完成！结果已保存到: {output_dir}")

if __name__ == '__main__':
    main()
