import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

plt.rcParams["font.family"] = ["SimHei", "WenQuanYi Micro Hei", "Heiti TC"]

# ========== 1. 自动查找文件和读取 ==========
def safe_read(path):
    try:
        df = pd.read_excel(path)
        print(f"✅ 成功读取: {path}")
        return df
    except Exception as e:
        print(f"❌ 读取失败: {path}\n错误: {str(e)}")
        return None

base_dirs = [os.getcwd(), os.path.expanduser('~/Desktop')]
files = {}
for dir in base_dirs:
    for file in os.listdir(dir):
        if '销售统计' in file and file.endswith('.xlsx'):
            files['sales'] = os.path.join(dir, file)
        elif '评论' in file and file.endswith('.xlsx'):
            files['reviews'] = os.path.join(dir, file)

df_sales = safe_read(files.get('sales'))
df_reviews = safe_read(files.get('reviews'))

if df_sales is None or df_reviews is None:
    exit("数据文件缺失，退出程序")

# ========== 2. 颜色字段提取 ==========
def extract_color_strict(sku):
    if pd.isna(sku): return None
    try:
        return str(sku).split("颜色:")[1].split(";")[0].split()[0]
    except:
        return None

df_reviews["颜色"] = df_reviews["auctionSku"].apply(extract_color_strict)

# ========== 3. 合并评论与销量数据，统计销量Top10颜色 ==========
df_merged = pd.merge(
    df_sales,
    df_reviews[["_itemnumber_", "颜色"]].dropna(),
    on="_itemnumber_",
    how="inner"
)
color_stats = df_merged.groupby("颜色")["comment_count"].sum().nlargest(10)

# ========== 4. 可视化颜色销量Top10 ==========
plt.figure(figsize=(12, 6))
bars = plt.bar(color_stats.index, color_stats.values, color='#4B96E9')
for bar in bars:
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height(),
             f"{int(bar.get_height())}", ha='center', va='bottom')
plt.title("真维斯最受欢迎颜色Top10")
plt.xlabel("颜色")
plt.ylabel("销量")
plt.xticks(rotation=45)
save_path_top10 = os.path.join(os.path.expanduser('~'), 'Desktop', "真维斯颜色销量.png")
plt.savefig(save_path_top10, dpi=120, bbox_inches='tight')
print(f"✅ Top10颜色销量图已保存到桌面: {save_path_top10}")
plt.show()

# ========== 5. 计算颜色销售额分布 ==========
def extract_color_general(sku):
    try:
        if pd.isna(sku):
            return '未知颜色'
        sku = str(sku)
        if '颜色:' in sku:
            return sku.split('颜色:')[1].split(';')[0].strip()
        elif 'colour:' in sku.lower():
            return sku.split('colour:')[1].split(';')[0].strip()
        else:
            return '未知颜色'
    except:
        return '未知颜色'

df_sales = df_sales.drop_duplicates('_itemnumber_', keep='last')
df_reviews = df_reviews.drop_duplicates('_itemnumber_', keep='last')
merged_df = pd.merge(df_sales, df_reviews, on='_itemnumber_', how='left')
merged_df['商品颜色'] = merged_df['auctionSku'].apply(extract_color_general)

color_sales = merged_df.groupby('商品颜色').agg({
    'comment_count': 'sum',
    'estimated_price_by_sales': 'mean',
    '_itemnumber_': 'nunique'
}).reset_index()

color_sales.columns = ['商品颜色', '总销量', '平均价格', '商品数量']
color_sales['总销售额'] = color_sales['总销量'] * color_sales['平均价格']

valid_colors = color_sales[color_sales['商品颜色'] != '未知颜色'].sort_values('总销售额', ascending=False).head(10)
if valid_colors.empty:
    print("警告：没有找到有效颜色数据，使用所有颜色数据")
    valid_colors = color_sales.sort_values('总销售额', ascending=False).head(10)

plt.figure(figsize=(12, 6), facecolor='white')
ax = sns.barplot(x='总销售额', y='商品颜色', data=valid_colors, palette='Set3')
plt.title('不同颜色商品的销售表现（按总销售额排序）')
plt.xlabel('总销售额')
plt.ylabel('商品颜色')
for i, v in enumerate(valid_colors['总销售额']):
    ax.text(v + 100, i, f'￥{v:.0f}', ha='left', va='center')
plt.tight_layout()
save_path_sales = os.path.join(os.path.expanduser('~'), 'Desktop', "颜色销售额分布图.png")
plt.savefig(save_path_sales, dpi=300, bbox_inches='tight', facecolor='white')
print(f"✅ 颜色销售额分布图已保存到桌面: {save_path_sales}")
plt.show()
